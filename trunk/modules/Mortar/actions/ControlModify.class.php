<?php
/**
 * Mortar
 *
 * @copyright Copyright (c) 2009, Robert Hafner
 * @license http://www.mozilla.org/MPL/
 * @package Mortar
 * @subpackage Dashboard
 */

/**
 * The ControlModify action is a helper action used to alter the contents of a User's Dashboard ControlSet -- using
 * POST requests generated by button clicks in the Dashboard event, it adds, modifies, or removes Controls from
 * the set and then saves the results back to the database.
 *
 * @package Mortar
 * @subpackage Dashboard
 */
class MortarActionControlModify extends ActionBase
{
	static $requiredPermission = 'System';

	/**
	 * This action checks which specific modification is requested in the Input data, then sets the redirect
	 * URL and performs the actions needed as appropriate.
	 *
	 */
	public function logic()
	{
		$query = Query::getQuery();
		$input = Input::getInput();

		$url = new Url();
		$url->module = 'Mortar';
		$url->format = $query['format'];

		// if user requested Settings, all we need to do is redirect the user to the ControlSettings action,
		// otherwise we'll go back to the Dashboard when we're done
		if(isset($input['modify']) && isset($query['id']) && $input['modify'] === 'Settings') {
			$url->action = 'ControlSettings';
			$url->id = $query['id'];
		} else {
			$url->action = 'Dashboard';
		}

		$this->ioHandler->addHeader('Location', (string) $url);

		// if we didn't come from the dashboard with the right user id listed, just go back to the Dashboard
		// since we need the User ID to load a ControlSet
		if(!isset($input['user'])) {
			return false;
		}

		$cs = new ControlSet($input['user']);
		$cs->loadControls();
		$info = $cs->getInfo();

		// if we're here to add a control, just add it at the tail-end, save the controls, and return
		if(isset($input['modify']) && isset($input['id']) && $input['modify'] === 'Add') {
			$cs->addControl($input['id']);
			$cs->saveControls();
			return true;
		}

		// if the ID isn't set in the URL and POST, or action isn't set in the POST, we have an error;
		// just go back
		if(!isset($input['id']) || !isset($input['modify']) || !isset($query['id'])) {
			return false;
		}

		// if the database id of the control in position X doesn't match the ID provided in the post, we're
		// looking at a visit from an out-of-date link; go back
		if((int) $info[$query['id']]['id'] !== (int) $input['id']) {
			return false;
		}

		// finally we're prepared to actually perform our action -- at this stage we just call a method of
		// the ControlSet based on which action is specified by the user, then save and redirect back home
		switch($input['modify']) {
			case 'Remove':
				$cs->removeControl($query['id']);
				break;
			case 'Move Up':
				$cs->swapControls($query['id'], true);
				break;
			case 'Move Down':
				$cs->swapControls($query['id'], false);
				break;
		}

		$cs->saveControls();

		return true;
	}

	/**
	 * This method just returns an empty string since the action will always immediately redirect back to its
	 * origin.
	 *
	 * @return string
	 */
	public function viewAdmin($page)
	{
		return '';
	}

	public function viewHtml($page)
	{
		return '';
	}
}

?>