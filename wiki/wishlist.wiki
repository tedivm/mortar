#summary A list of things we want.
#labels Featured

= Introduction =

The goal of this document is to list isolated classes or tools that are not available inside of Mortar (or any modules) that would be useful.


= Details =

== Diff ==

A class to compare two versions of a document (say, the wiki or cms revisions) is seriously needed at this point.

== EOT @font-fact support ==

A way to upload TTF or OTF fonts and have them converted for both functional and MS @font-face use. (This is a huge way to differentiate Mortar from other such projects for designers. Huge.)

== Filters ==

Right now we're mostly using the filter_var php functions, but we could use something more flexible. This shouldn't just filter but also validate, so using the form validation classes as a starting point may be a good idea.

== Admin Interfaces ==

An extendable set of classes should be created which control the content of admin pages which have no equivalent on the front end, and methods for interacting with certain key elements (users, groups, sites, configuration) should be introduced.

== User/Group Interface ==

Currently there is no interface for browsing or interacting with users in the Mortar system. Ideally this should come together as a specific instance of the Admin Interface classes and lean heavily on DisplayLists to do its job.

== Modifiable Pretty URLs == 

A system to actually let you define the structure for URLs (either overall or on a per-directory/per-group level) based on key elements of each model (to allow for automatic SEO URLs in addition to slug-based page names.)

== Cascading Settings ==

If we have global settings that can be overridden on a local level, we need to implement a UI mechanism for clearly indicating _where_ a given setting originates, allowing someone viewing info on a given area to see which settings are set locally, which are set in a parent, and which are set globally.

== "Empty Box" ==

In order to ease module/plugin development, we should create an "empty box" template for modules that includes code for certain kinds of functionality. For example, if Graffiti includes code that lets you manually turn it on or off for Page-descendants, including this sort of selector so module authors are expected to use it where appropriate by default will allow us to help guide module author behavior in useful ways.

(Similarly, certain things are possible in Wordpress plugins but not well-supported on the site -- multiple-use widgets being an obvious example. Anything like this that we have should be supported in the Empty Box so people are encouraged to use it.)

== Imports ==

If we want people to migrate over from competing platforms, we should provide some ability to import content from major competing platforms (Movable Type and Wordpress, at _very_ least.) 

== Package Manager ==

A way to remotely download and install packages from a central repository is vital to making the software fully workable out of the box.

== Action Listing ==

Besides the "universal" actions (Read/Edit/Delete/Index) there are numerous model-specific actions; DisplayLists need a way to easily get access to the correct URLs for all of these and possibly to generate a comprehensive list of every possible action.

== Moving/Converting Models ==

Models need to be able to be moved, merged together, redated, etc. to ease reordering of blog posts, merging/moving of forum threads, etc.

== Pagination System ==

This should probably be flexible enough to handle both individual Pages and other models that simply have their content divided into arbitrary pages _and_ things like blogs/forums that paginate based on model lists.

== Search Engine ==

Hoo boy do we need a search engine. The ideal Mortar search engine would search all kinds of models by default (but allow you to fine-tune your search as desired), search all default fields individually (with optional hooks to add model-specific fields), and output results through a DisplayList. Oh, and it should also not just arbitrarily break when a forum gets big.

== More Form Controls ==

We should have a big list of custom form controls implemented by default. Just off the top of my head: three-state checkbox, combo box, array (i.e. multiple expanding fields).