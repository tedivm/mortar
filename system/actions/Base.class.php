<?php

abstract class ActionBase implements ActionInterface
{
	/**
	 * The argument for this action. Varies based on the model type. Set by the constructor
	 * as provided by the OutputController.
	 *
	 * @var varies
	 */
	protected $argument;

	/**
	 * This is the IOProcessor used by the action. Set by the constructor as provided by the OutputController.
	 *
	 * @var IoProcessorCli
	 */
	protected $ioHandler;

	/**
	 * This is the name of the package this action resides in. It is generated by the constructor based off of the
	 * class name.
	 *
	 * @access protected
	 * @var string
	 */
	protected $package;

	/**
	 * This is the name of the action- its set by the constructor based on the class name
	 *
	 * @access protected
	 * @var string
	 */
	protected $actionName;

	/**
	 * This is the permissions for the location being acted on, by the active user.
	 *
	 * @access protected
	 * @var Permissions
	 */
	protected $permissionObject;

	/**
	 * When set this value defines the expiration and max age values. A negative value will give an expiration
	 * date in the past. When not set, the expiration and max age values are based off of the time between now
	 * and the last modification time of the current model
	 *
	 * @access protected
	 * @var int
	 */
	protected $cacheExpirationOffset;

	/**
	 * This array holds locally-defined settings that override those stored in $settings.
	 *
	 * @var array
	 */
	protected $localSettings = array();

	/**
	 * This array is used to hold a variety of action-specific settings that can vary based on the Output
	 * method being utilized with the action. The array structure is 
	 * $settings[outputMethod][settingName] = settingValue, where outputMethod is either a Controller
	 * name or 'Base.'
	 *
	 * @access public
	 * @var array
	 */
	public static $settings = array();

	/**
	 * This defines the permission action that the user needs to run this. Permissions are based off of an action and
	 * a resource type, so this value is used with the model type to generate a permissions object
	 *
	 * @access public
	 * @var string
	 */
	public static $requiredPermission;

	/**
	 * This defines the permission resource type that is combined with the required action permission to test the
	 * user's ability to run this. Defaults to 'Base'
	 *
	 * @access public
	 * @var string
	 */
	public static $requiredPermissionType;

	/**
	 * Assigns the argument and IO Handler for the class as provided to it. Assigns the name and package info based
	 * on the name of the class, which is of the form PackageActionName.
	 *
	 * @param $argument
	 * @param IOProcessorCli $handler
	 */
	public function __construct($argument, $handler)
	{
		$this->argument = $argument;
		$this->ioHandler = $handler;

		$namingInfo = explode('Action', get_class($this));
		$this->actionName = array_pop($namingInfo);
		$this->package = array_shift($namingInfo);
	}

	/**
	 * If the user is allowed to use this action, we execute the action's logic.
	 *
	 */
	public function start()
	{
		if($this->checkAuth() !== true)
			throw new AuthenticationError();

		if(method_exists($this, 'logic'))
			$this->logic();
	}

	/**
	 * Tests the current user for permission to perform a specified action. Uses the current site by default
	 * and tests against either the default action or the action provided.
	 *
	 * @param string|null $action
	 * @return bool
	 */
	public function checkAuth($action = NULL)
	{
		if(!isset($this->permissionObject))
		{
			$user = ActiveUser::getUser();

			if($site = ActiveSite::getSite())
			{
				$this->permissionObject = new Permissions($site->getLocation(), $user);
			}else{
				$this->permissionObject = new Permissions(1, $user); // 1 == Root
			}
		}

		if(!$action)
			$action = staticHack(get_class($this), 'requiredPermission');

		$type = staticHack(get_class($this), 'requiredPermissionType');

		if(!$type)
			$type = 'Base';

		return $this->permissionObject->isAllowed($action, $type);
	}

	/**
	 * Returns the name of the action. 
	 *
	 * @return string
	 */
	public function getName()
	{
		return $this->actionName;
	}

	/**
	 * Sets the setting for the specified format to the provided value.
	 *
	 * @param string $name
	 * @param string $format = 'Base'
	 * @return any
	 */
	public function setSetting($name, $format, $value)
	{
		$this->localSettings[$format][$name] = $value;
	}

	/**
	 * Returns the value of the specified setting for the specified output method.
	 *
	 * @param string $name
	 * @param string $format = 'Base'
	 * @return any
	 */
	public function getSetting($name, $format = 'Base')
	{
		if(isset($this->localSettings[$format][$name]))
			return $this->localSettings[$format][$name];

		if(isset($this->localSettings['Base'][$name]))
			return $this->localSettings['Base'][$name];

		return self::loadSetting($name, $format, get_class($this));
	}

	/**
	 * Static helper function that loops through the descent of the action looking for settings.
	 *
	 * @param string $name
	 * @param string $format = 'Base'
	 * @return scalar|array|null
	 */
	static function loadSetting($name, $format, $action)
	{
		$reflection = new ReflectionClass($action);
		$settings = $reflection->getStaticPropertyValue('settings');

		if(isset($settings) && is_array($settings)) {
			if(isset($settings[$format][$name])) {
				return $settings[$format][$name];
			}

			if(isset($settings['Base'][$name])) {
				return $settings['Base'][$name];
			}
		}

		$parentClass = $reflection->getParentClass();

		if($parentClass && $className = $parentClass->getName())
	               	return self::loadSetting($name, $format, $className);

		return null;
	}

	/*
	public function viewAdmin()
	{

	}

	public function viewHtml()
	{

	}

	public function viewXml()
	{

	}

	public function viewJson()
	{

	}
	*/
}



?>